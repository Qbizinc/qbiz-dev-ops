#!/bin/bash
# User data script for dbt on EC2 (Direct Install) - POC with User/Password Auth
# WARNING: This configuration corresponds to a security group allowing SSH from 0.0.0.0/0 - HIGHLY INSECURE - POC ONLY!
set -e # Exit immediately if a command exits with a non-zero status.
exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1 # Log output to console and log file

echo "Starting dbt setup (User/Password POC with OPEN SSH) on $(date) in $(pwd)"
echo "Running as: $(whoami)"

# Install OS updates and required packages
echo "Updating OS and installing packages..."
sudo yum update -y
sudo yum install -y python3 python3-pip git jq # jq for parsing secrets, git for repo, aws-cli should be present on EC2

# Install specific dbt-snowflake version using pip3
echo "Installing dbt-snowflake version ${dbt_snowflake_version}..."
sudo pip3 install dbt-snowflake==${dbt_snowflake_version} --upgrade

# Add dbt executable path (~/.local/bin for --user install) to PATH for non-interactive sessions like cron
# Also add it for the current ec2-user's bash profile
echo 'export PATH=$PATH:/home/ec2-user/.local/bin' | sudo tee -a /home/ec2-user/.bashrc /etc/profile.d/add_local_bin.sh
sudo chmod +x /etc/profile.d/add_local_bin.sh
echo "Added ~/.local/bin to PATH"

# Fetch Snowflake credentials (User/Password) from AWS Secrets Manager
echo "Fetching Snowflake credentials (User/Password) from Secrets Manager ARN: ${snowflake_credentials_arn}"
SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id "${snowflake_credentials_arn}" --region "${aws_region}" --query SecretString --output text)

# Validate if the secret was retrieved
if [ -z "$SECRET_JSON" ]; then
    echo "ERROR: Failed to retrieve secret from Secrets Manager ARN: ${snowflake_credentials_arn}"
    exit 1
fi

# Extract User and Password into SHELL variables using jq
SNOWFLAKE_USER=$(echo "$SECRET_JSON" | jq -r .username)
SNOWFLAKE_PASSWORD=$(echo "$SECRET_JSON" | jq -r .password)

# Validate fetched credentials are not empty or null
if [ -z "$SNOWFLAKE_USER" ] || [ "$SNOWFLAKE_USER" == "null" ]; then
    echo "ERROR: Username key (.username) not found or value is null in the secret JSON."
    exit 1
fi
 if [ -z "$SNOWFLAKE_PASSWORD" ] || [ "$SNOWFLAKE_PASSWORD" == "null" ]; then
    echo "ERROR: Password key (.password) not found or value is null in the secret JSON."
    exit 1
fi
echo "Successfully fetched Snowflake username and password from Secrets Manager."

# Set environment variables needed by dbt profiles.yml
# Create a system-wide profile script to be sourced by cron and interactive sessions
echo "Setting Snowflake environment variables..."

sudo tee /etc/profile.d/dbt_env.sh > /dev/null <<EOF
# dbt Snowflake Environment Variables (Generated by EC2 User Data)
# Sourced by cron jobs and interactive shells

# Variables passed directly from Terraform template
export DBT_TARGET="${dbt_target}"
export SNOWFLAKE_ACCOUNT="${snowflake_account}"
export SNOWFLAKE_ROLE="${snowflake_role}"
export SNOWFLAKE_WAREHOUSE="${snowflake_warehouse}"
export SNOWFLAKE_DATABASE="${snowflake_database}"
export SNOWFLAKE_SCHEMA="${snowflake_schema}"

# Variables fetched from Secrets Manager (use $${} to escape Terraform, allow shell expansion)
export SNOWFLAKE_USER="$${SNOWFLAKE_USER}"         # CORRECTED: Escaped for Terraform
export SNOWFLAKE_PASSWORD="$${SNOWFLAKE_PASSWORD}"   # CORRECTED: Escaped for Terraform
EOF
# Make the script executable
sudo chmod +x /etc/profile.d/dbt_env.sh
echo "Environment variables script created at /etc/profile.d/dbt_env.sh"

# Clone the dbt project repository using the Git URL passed from Terraform
# Clone as the ec2-user
echo "Cloning dbt project from ${dbt_project_git_url}..."
sudo -u ec2-user git clone "${dbt_project_git_url}" /home/ec2-user/dbt_project
echo "dbt project cloned to /home/ec2-user/dbt_project"

# Run dbt deps to install any package dependencies
# Run as ec2-user, ensure the environment variables and correct dbt path are used
echo "Running dbt deps..."
cd /home/ec2-user/dbt_project
sudo -u ec2-user -E bash -c 'source /etc/profile.d/dbt_env.sh && source /etc/profile.d/add_local_bin.sh && dbt deps' || echo "WARNING: 'dbt deps' failed. Check project dependencies and connection."
echo "dbt deps execution attempted."
